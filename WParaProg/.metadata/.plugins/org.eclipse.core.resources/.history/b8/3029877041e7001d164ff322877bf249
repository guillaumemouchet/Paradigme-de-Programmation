
package ch.hearc.SA.labo2.BlockingQueue;

import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.BlockingQueue;

public class Producteur implements Runnable
	{

	private BlockingQueue<int[]> queue;
	private BlockingQueue<Long> timeList;
	private long start;
	private long executionTime;
	public Producteur(BlockingQueue<int[]> queue, BlockingQueue<Long>timeList, long start, long executionTime)
		{
		this.queue = queue;
		this.timeList = timeList;
		this.start = start;
		this.executionTime = executionTime;
		}

	private void trace(String m)
		{
		System.out.println(m);
		Thread.yield();
		}

	@Override
	public void run()
		{
		String name = Thread.currentThread().getName();

		System.out.println(name + " started");

		while( System.currentTimeMillis()-start<executionTime)
			{

			try
				{
				Thread.sleep(1000);
				long startTime = System.currentTimeMillis();

				Random rand = new Random();

				int[] array = rand.ints(10, 1, 100).toArray();

				queue.put(array);
				trace("\n" + name + " creating an array : " + Arrays.toString(array) + "\n");
				timeList.add(System.currentTimeMillis()-startTime);


				}
			catch (InterruptedException e)
				{
				// TODO Auto-generated catch block
				e.printStackTrace();
				}

			}
		}

	}
