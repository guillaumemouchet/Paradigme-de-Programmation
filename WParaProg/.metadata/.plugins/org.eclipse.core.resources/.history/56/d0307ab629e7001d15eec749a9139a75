
package ch.hearc.SA.labo2.BlockingQueue;

import java.util.Arrays;
import java.util.concurrent.BlockingQueue;

public class Consommateur implements Runnable
	{

	private BlockingQueue<int[]> queue;
	private BlockingQueue<Long> timeList;
	private long start;
	private long executionTime;
	public Consommateur(BlockingQueue<int[]> queue, BlockingQueue<Long>timeList, long start, long executionTime)
		{
		this.queue = queue;
		this.timeList = timeList;
		this.start = start;
		this.executionTime = executionTime;
		}

	private void trace(String m)
	{
	System.out.println(m);
	Thread.yield();
	}
	@Override
	public void run()
		{
		String name = Thread.currentThread().getName();

		while( System.currentTimeMillis()-start<executionTime)
			{
				int[] array;
				try
					{
					Thread.sleep(1000);
					long startTime = System.currentTimeMillis();
					array = queue.take();
					//process the message now

					//trace("\t" + name + " array before process : " + Arrays.toString(array));
					Arrays.sort(array);
					timeList.add(System.currentTimeMillis()-startTime);

					trace("\t" + name + " array after process : " + Arrays.toString(array));

					}
				catch (InterruptedException e)
					{
					// TODO Auto-generated catch block
					e.printStackTrace();
					}

			}
		}


	}
