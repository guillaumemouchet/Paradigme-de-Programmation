
package ch.hearc.SA.labo2.BlockingQueue;

import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.BlockingQueue;

public class Producteur implements Runnable
	{
	
	private BlockingQueue<int[]> queue;
	private BlockingQueue<Long> timeList;
	
	public Producteur(BlockingQueue<int[]> queue, BlockingQueue<Long> timeList)
		{
		this.queue = queue;
		this.timeList = timeList;
		}
		
	private void trace(String m)
		{
		System.out.println(m);
		Thread.yield();
		}
		
	@Override
	public void run()
		{
		String name = Thread.currentThread().getName();
		
		System.out.println(name + " started");
		
		while(true)
			{
			
			try
				{
				Thread.sleep(1000);
				Random rand = new Random();
				
				int[] array = rand.ints(10, 1, 100).toArray();
				
				queue.put(array);
				trace("\n" + name + " creating an array : " + Arrays.toString(array) + "\n");
				
				}
			catch (InterruptedException e)
				{
				// TODO Auto-generated catch block
				e.printStackTrace();
				}
				
			}
		}
		
	}
