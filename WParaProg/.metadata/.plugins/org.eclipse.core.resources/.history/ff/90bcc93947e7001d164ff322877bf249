
package ch.hearc.SA.labo2.BlockingQueue;

import java.util.ArrayList;

/**
 * <h1>Performance Indicators</h1>
 *
 * A message is sent at time x<br>
 * A message is received in the buffer at time y<br>
 * A message is displayed at time z<br>
 * The delta between x and z defines the latency of the system<br>
 * The ratio between the number of messages sent and the time elapsed
 * defines the throughput (messages/s) of the system<br>
 */
public class PerformanceCalculator
	{

	private static double latencyMs;
	private static double throughputMsgPerS;
	private static double throughputBPerS;
	private static long elapsedTimeMs;

	public static String createReport(int nbProducteurs, int nbConsommateurs, int queueSize, long executionTime)
		{
		ArrayList<Long> shuffleTimes = TimePerformance.getInstance().getArrayCreateTimes();
		ArrayList<Long> sortTimes = TimePerformance.getInstance().getArraySortTimes();

//		/*
//		 * We have to ignore the messages that aren't in the shownTimes because the buffer might have been full.
//		 * This means we use shownTimes.size() instead of sentTimes.size() in the average calculation.
//		 */
//		OptionalDouble latencyNs;
//		if (sentTimes.size() >= shownTimes.size())
//			{
//			latencyNs = IntStream.range(0, shownTimes.size()).mapToDouble(i -> (shownTimes.get(i) - sentTimes.get(i))).average();
//			}
//		else
//			{
//			latencyNs = IntStream.range(0, sentTimes.size()).mapToDouble(i -> (shownTimes.get(i) - sentTimes.get(i))).average();
//			}
//
//		if (latencyNs.isEmpty())
//			{ throw new RuntimeException("The latency could not be calculated"); }
//
//		latencyMs = latencyNs.getAsDouble() / 1000000; // milliseconds
//
//		int nbMessages = Settings.getNbMessages();
//
//		long startTime = PerformanceMeasures.getInstance().getStartTime();
//		long endTime = PerformanceMeasures.getInstance().getEndTime();
//		long elapsedTimeNs = endTime - startTime;
//		elapsedTimeMs = elapsedTimeNs / 1000000; // milliseconds
//
//		double throughputMpNs = nbMessages / (double)elapsedTimeMs; // messages per millisecond
//		throughputMsgPerS = throughputMpNs * 1000000000; // messages per second
//		throughputBPerS = averageMessageSizeInBytes() * throughputMsgPerS; // bytes per second
//
//		StringBuilder stringBuilder = new StringBuilder();
//		stringBuilder.append("------------------------------------------------------------------").append("\n");
//		stringBuilder.append("Settings:\n");
//		stringBuilder.append("Number of persons: ").append(tabs(4)).append(Settings.getNbPersons()).append("\n");
//		stringBuilder.append("Buffer size: ").append(tabs(5)).append(Settings.getBufferSize()).append("\n");
//		stringBuilder.append("Number of messages: ").append(tabs(3)).append(Settings.getNbMessages()).append("\n");
//
//		stringBuilder.append("------------------------------------------------------------------").append("\n");
//		stringBuilder.append("Performance report:\n");
//		stringBuilder.append("Elapsed time [s]: ").append(tabs(4)).append(round(elapsedTimeMs / (double)1000000000)).append("\n");
//		stringBuilder.append("Throughput [msg/ms]: ").append(tabs(3)).append(round(throughputMsgPerS)).append("\n");
//		stringBuilder.append("Effective throughput [B/s]: ").append(tabs(1)).append(round(throughputBPerS)).append("\n");
//		stringBuilder.append("Effective throughput [Mb/s]: ").append(tabs(1)).append(round(throughputBPerS / 1000000)).append("\n");
//		stringBuilder.append("Latency [ms]: ").append(tabs(5)).append(round(latencyMs)).append("\n");
//		stringBuilder.append("Average message size [B]: ").append(tabs(2)).append(round(averageMessageSizeInBytes())).append("\n");

		return stringBuilder.toString();
		}

	private static double round(double value)
		{
		return Math.round(value * 100.0) / 100.0;
		}

	private static String tabs(int nb)
		{
		return "\t".repeat(Math.max(0, nb));
		}

	/**
	 * Elapsed time [ms]<br>
	 * Throughput [msg/s]<br>
	 * Effective throughput [B/s]<br>
	 * Latency [ms]<br>
	 * @return
	 */
	public static ArrayList<Double> getImportantValues()
		{
		ArrayList<Double> values = new ArrayList<>();
		values.add((double)elapsedTimeMs);
		values.add(throughputMsgPerS);
		values.add(throughputBPerS);
		values.add(latencyMs);
		return values;
		}
	}
